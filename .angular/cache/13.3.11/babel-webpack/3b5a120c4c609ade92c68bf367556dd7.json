{"ast":null,"code":"import { catchError } from 'rxjs/operators';\nimport { HttpHeaders } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\"; // Declaring the api url that will provide data for the client app\n\nconst apiUrl = 'https://desolate-everglades-87695-c2e8310ae46d.herokuapp.com/';\n/**\r\n * @description Service for user registration operations.\r\n * @injectable\r\n */\n\nexport let FetchApiDataService = /*#__PURE__*/(() => {\n  class FetchApiDataService {\n    constructor(http) {\n      this.http = http;\n    }\n\n    userRegistration(userDetails) {\n      return this.http.post(apiUrl + 'users', userDetails).pipe(catchError(this.handleError));\n    }\n\n    userLogin(userDetails) {\n      return this.http.post(apiUrl + 'login?Username=' + userDetails.Username + '&Password=' + userDetails.Password, userDetails).pipe(catchError(this.handleError));\n    }\n\n    getAllMovies() {\n      //console.log('getallmovies called'); \n      const token = localStorage.getItem('token'); //console.log('Token:', token);\n\n      return this.http.get(apiUrl + 'movies', {\n        headers: new HttpHeaders({\n          Authorization: 'Bearer ' + token\n        })\n      }).pipe(map(this.extractResponseData), catchError(this.handleError));\n    }\n\n    getOneMovie(title) {\n      const token = localStorage.getItem('token');\n      return this.http.get(apiUrl + 'movies/' + title, {\n        headers: new HttpHeaders({\n          Authorization: 'Bearer ' + token\n        })\n      }).pipe(map(this.extractResponseData), catchError(this.handleError));\n    }\n\n    getOneDirector(directorName) {\n      const token = localStorage.getItem('token');\n      return this.http.get(apiUrl + 'movies/director/' + directorName, {\n        headers: new HttpHeaders({\n          Authorization: 'Bearer ' + token\n        })\n      }).pipe(map(this.extractResponseData), catchError(this.handleError));\n    }\n\n    getOneGenre(genreName) {\n      const token = localStorage.getItem('token');\n      return this.http.get(apiUrl + 'movies/genre/' + genreName, {\n        headers: new HttpHeaders({\n          Authorization: 'Bearer ' + token\n        })\n      }).pipe(map(this.extractResponseData), catchError(this.handleError));\n    }\n\n    getOneUser() {\n      const token = localStorage.getItem('token');\n      return this.http.get(apiUrl + 'users', {\n        headers: new HttpHeaders({\n          Authorization: 'Bearer ' + token\n        })\n      }).pipe(map(this.extractResponseData), catchError(this.handleError));\n    }\n\n    getfavoriteMovies(username) {\n      const token = localStorage.getItem('token');\n      return this.http.get(apiUrl + 'users/' + username, {\n        headers: new HttpHeaders({\n          Authorization: 'Bearer ' + token\n        })\n      }).pipe(map(this.extractResponseData), map(data => data.favorite_movies), catchError(this.handleError));\n    }\n\n    addfavoriteMovies(movieId) {\n      const token = localStorage.getItem('token');\n      const user = JSON.parse(localStorage.getItem('user') || '{}');\n      user.FavoriteMovies.push(movieId);\n      localStorage.setItem('user', JSON.stringify(user)); // Update the user object in localStorage\n\n      return this.http.post(apiUrl + 'users/' + user.username + '/movies/' + movieId, {}, {\n        headers: new HttpHeaders({\n          Authorization: 'Bearer ' + token\n        })\n      }).pipe(map(this.extractResponseData), catchError(this.handleError));\n    }\n\n    editUser(updatedUser) {\n      const user = JSON.parse(localStorage.getItem('user') || '{}');\n      const token = localStorage.getItem('token');\n      return this.http.put(apiUrl + 'users/' + user.Username, updatedUser, {\n        headers: new HttpHeaders({\n          Authorization: 'Bearer ' + token\n        })\n      }).pipe(map(this.extractResponseData), catchError(this.handleError));\n    }\n\n    deleteOneUser() {\n      const user = JSON.parse(localStorage.getItem('user') || '{}');\n      const token = localStorage.getItem('token');\n      return this.http.delete(apiUrl + 'users/' + user.Username, {\n        headers: new HttpHeaders({\n          Authorization: 'Bearer ' + token\n        })\n      }).pipe(catchError(this.handleError));\n    }\n\n    deleteFavoriteMovie(movieId) {\n      const token = localStorage.getItem('token');\n      const user = JSON.parse(localStorage.getItem('user') || '{}');\n      const index = user.FavoriteMovies.indexOf(movieId);\n\n      if (index > -1) {\n        user.FavoriteMovies.splice(index, 1); // remove the movieId from array\n      }\n\n      localStorage.setItem('user', JSON.stringify(user)); // update the user object in localStorage\n\n      return this.http.delete(apiUrl + 'users/' + user.username + '/favorites/' + movieId, {\n        headers: new HttpHeaders({\n          Authorization: 'Bearer ' + token\n        })\n      }).pipe(map(this.extractResponseData), catchError(this.handleError));\n    }\n\n    extractResponseData(res) {\n      const body = res;\n      return body || {};\n    }\n\n    handleError(error) {\n      if (error.error instanceof ErrorEvent) {\n        console.error('Some error occurred:', error.error.message);\n      } else {\n        console.error(`Error Status code ${error.status}, ` + `Error body is: ${error.error}`);\n      }\n\n      return throwError(() => new Error('Something bad happened; please try again later.'));\n    }\n\n  }\n\n  FetchApiDataService.ɵfac = function FetchApiDataService_Factory(t) {\n    return new (t || FetchApiDataService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  FetchApiDataService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: FetchApiDataService,\n    factory: FetchApiDataService.ɵfac,\n    providedIn: 'root'\n  });\n  return FetchApiDataService;\n})();","map":null,"metadata":{},"sourceType":"module"}